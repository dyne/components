/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, Emphasis, Size } from "./components/types";
import { EditorStateConfig } from "@codemirror/state";
import { EditorId, SlangroomEditorContent } from "./components/dyne-slangroom-editor/dyne-slangroom-editor";
import { SlangroomPreset } from "./components/dyne-slangroom-preset-loader/dyne-slangroom-preset-loader";
export { Color, Emphasis, Size } from "./components/types";
export { EditorStateConfig } from "@codemirror/state";
export { EditorId, SlangroomEditorContent } from "./components/dyne-slangroom-editor/dyne-slangroom-editor";
export { SlangroomPreset } from "./components/dyne-slangroom-preset-loader/dyne-slangroom-preset-loader";
export namespace Components {
    interface DyneButton {
        /**
          * button color could be: 'primary', 'secondary' or 'tertiary'
         */
        "color"?: Color;
        /**
          * button emphasis could be: 'slight', 'moderate' or 'high'
         */
        "emphasis"?: Emphasis;
        /**
          * button sizes could be: 'small', 'medium' or 'large'
         */
        "size"?: Size;
    }
    interface DyneCodeEditor {
        "class": string;
        "config": EditorStateConfig;
        "content": string;
        "getContent": () => Promise<string>;
        "name": string;
        "setContent": (text: string) => Promise<void>;
    }
    interface DyneInline {
        "gap"?: number;
    }
    interface DyneSlangroomEditor {
        "contract": string;
        "data": string;
        "getContent": () => Promise<SlangroomEditorContent>;
        "keys": string;
        "keysLocalStorageKey": string | undefined;
        "keysMode": 'none' | 'editor' | 'localStorage';
        "setContent": (editor: EditorId, content: string) => Promise<void>;
    }
    interface DyneSlangroomPreset {
        "contract": string;
        "data": string;
        "description": string;
        "getPreset": () => Promise<SlangroomPreset>;
        "group": string;
        "keys": string;
        "name": string;
    }
    interface DyneSlangroomPresetLoader {
        "editorId": string;
    }
}
declare global {
    interface HTMLDyneButtonElement extends Components.DyneButton, HTMLStencilElement {
    }
    var HTMLDyneButtonElement: {
        prototype: HTMLDyneButtonElement;
        new (): HTMLDyneButtonElement;
    };
    interface HTMLDyneCodeEditorElement extends Components.DyneCodeEditor, HTMLStencilElement {
    }
    var HTMLDyneCodeEditorElement: {
        prototype: HTMLDyneCodeEditorElement;
        new (): HTMLDyneCodeEditorElement;
    };
    interface HTMLDyneInlineElement extends Components.DyneInline, HTMLStencilElement {
    }
    var HTMLDyneInlineElement: {
        prototype: HTMLDyneInlineElement;
        new (): HTMLDyneInlineElement;
    };
    interface HTMLDyneSlangroomEditorElement extends Components.DyneSlangroomEditor, HTMLStencilElement {
    }
    var HTMLDyneSlangroomEditorElement: {
        prototype: HTMLDyneSlangroomEditorElement;
        new (): HTMLDyneSlangroomEditorElement;
    };
    interface HTMLDyneSlangroomPresetElement extends Components.DyneSlangroomPreset, HTMLStencilElement {
    }
    var HTMLDyneSlangroomPresetElement: {
        prototype: HTMLDyneSlangroomPresetElement;
        new (): HTMLDyneSlangroomPresetElement;
    };
    interface HTMLDyneSlangroomPresetLoaderElement extends Components.DyneSlangroomPresetLoader, HTMLStencilElement {
    }
    var HTMLDyneSlangroomPresetLoaderElement: {
        prototype: HTMLDyneSlangroomPresetLoaderElement;
        new (): HTMLDyneSlangroomPresetLoaderElement;
    };
    interface HTMLElementTagNameMap {
        "dyne-button": HTMLDyneButtonElement;
        "dyne-code-editor": HTMLDyneCodeEditorElement;
        "dyne-inline": HTMLDyneInlineElement;
        "dyne-slangroom-editor": HTMLDyneSlangroomEditorElement;
        "dyne-slangroom-preset": HTMLDyneSlangroomPresetElement;
        "dyne-slangroom-preset-loader": HTMLDyneSlangroomPresetLoaderElement;
    }
}
declare namespace LocalJSX {
    interface DyneButton {
        /**
          * button color could be: 'primary', 'secondary' or 'tertiary'
         */
        "color"?: Color;
        /**
          * button emphasis could be: 'slight', 'moderate' or 'high'
         */
        "emphasis"?: Emphasis;
        /**
          * button sizes could be: 'small', 'medium' or 'large'
         */
        "size"?: Size;
    }
    interface DyneCodeEditor {
        "class"?: string;
        "config"?: EditorStateConfig;
        "content"?: string;
        "name"?: string;
    }
    interface DyneInline {
        "gap"?: number;
    }
    interface DyneSlangroomEditor {
        "contract"?: string;
        "data"?: string;
        "keys"?: string;
        "keysLocalStorageKey"?: string | undefined;
        "keysMode"?: 'none' | 'editor' | 'localStorage';
    }
    interface DyneSlangroomPreset {
        "contract"?: string;
        "data"?: string;
        "description"?: string;
        "group"?: string;
        "keys"?: string;
        "name"?: string;
    }
    interface DyneSlangroomPresetLoader {
        "editorId"?: string;
    }
    interface IntrinsicElements {
        "dyne-button": DyneButton;
        "dyne-code-editor": DyneCodeEditor;
        "dyne-inline": DyneInline;
        "dyne-slangroom-editor": DyneSlangroomEditor;
        "dyne-slangroom-preset": DyneSlangroomPreset;
        "dyne-slangroom-preset-loader": DyneSlangroomPresetLoader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dyne-button": LocalJSX.DyneButton & JSXBase.HTMLAttributes<HTMLDyneButtonElement>;
            "dyne-code-editor": LocalJSX.DyneCodeEditor & JSXBase.HTMLAttributes<HTMLDyneCodeEditorElement>;
            "dyne-inline": LocalJSX.DyneInline & JSXBase.HTMLAttributes<HTMLDyneInlineElement>;
            "dyne-slangroom-editor": LocalJSX.DyneSlangroomEditor & JSXBase.HTMLAttributes<HTMLDyneSlangroomEditorElement>;
            "dyne-slangroom-preset": LocalJSX.DyneSlangroomPreset & JSXBase.HTMLAttributes<HTMLDyneSlangroomPresetElement>;
            "dyne-slangroom-preset-loader": LocalJSX.DyneSlangroomPresetLoader & JSXBase.HTMLAttributes<HTMLDyneSlangroomPresetLoaderElement>;
        }
    }
}
